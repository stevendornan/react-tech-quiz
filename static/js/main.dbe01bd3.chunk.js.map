{"version":3,"sources":["API.ts","Utils.ts","components/QuestionCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","disabled","style","backgroundColor","correctAnswer","value","onClick","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","quizOver","setQuizOver","EASY","setDifficulty","startQuiz","newQuestions","nextQuestion","name","onChange","e","target","length","undefined","currentTarget","correct","prev","answerObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbe01bd3.chunk.js","sourcesContent":["import { shuffleArray } from './Utils'\r\nexport type Question = {\r\n  category: string\r\n  correct_answer: string\r\n  difficulty: string\r\n  incorrect_answers: string[]\r\n  question: string\r\n  type: string\r\n}\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard',\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple&category=18`\r\n  const data = await (await fetch(endpoint)).json()\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }))\r\n}\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5)\r\n","import React from 'react'\r\nimport { AnswerObject } from '../App'\r\n\r\ntype Props = {\r\n  question: string\r\n  answers: string[]\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void\r\n  userAnswer: AnswerObject | undefined\r\n  questionNr: number\r\n  totalQuestions: number\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <div>\r\n    <div className='quiz-header'>\r\n      <p className='number'>\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    </div>\r\n\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <div key={answer}>\r\n          <button\r\n            disabled={userAnswer ? true : false}\r\n            style={{\r\n              backgroundColor:\r\n                userAnswer?.correctAnswer === answer\r\n                  ? 'green'\r\n                  : userAnswer?.correctAnswer !== answer &&\r\n                    userAnswer?.answer === answer\r\n                  ? 'red'\r\n                  : null,\r\n            }}\r\n            value={answer}\r\n            onClick={callback}\r\n          >\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default QuestionCard\r\n","import React, { useState } from 'react'\nimport { fetchQuizQuestions } from './API'\nimport QuestionCard from './components/QuestionCard'\nimport { QuestionState, Difficulty } from './API'\nimport './App.css'\n\nexport type AnswerObject = {\n  question: string\n  answer: string\n  correct: boolean\n  correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10\n\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [quizOver, setQuizOver] = useState(true)\n  const [difficulty, setDifficulty] = useState<Difficulty>(Difficulty.EASY)\n\n  const startQuiz = async () => {\n    setLoading(true)\n    setQuizOver(false)\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, difficulty)\n\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!quizOver) {\n      const answer = e.currentTarget.value\n      const correct = questions[number].correct_answer === answer\n      if (correct) setScore((prev) => prev + 1)\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers((prev) => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setQuizOver(true)\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n      <h1>REACT TECH QUIZ</h1>\n      <div className='quiz-container'>\n        {quizOver && (\n          <>\n            <h2>Select Difficulty:</h2>\n            <select\n              name='difficulty'\n              value={difficulty}\n              onChange={(e: any) => setDifficulty(e.target.value)}\n            >\n              <option value='easy'>Easy</option>\n              <option value='medium'>Medium</option>\n              <option value='hard'>Hard</option>\n            </select>\n          </>\n        )}\n\n        {quizOver ? (\n          <>\n            {userAnswers.length === TOTAL_QUESTIONS &&\n            score !== TOTAL_QUESTIONS ? (\n              <h2>\n                You Scored: {score} out of {TOTAL_QUESTIONS}\n              </h2>\n            ) : score === TOTAL_QUESTIONS ? (\n              <h2>\n                Congratulations! You Scored: {score} out of {TOTAL_QUESTIONS}{' '}\n              </h2>\n            ) : null}\n            {userAnswers.length === TOTAL_QUESTIONS &&\n            score !== TOTAL_QUESTIONS ? (\n              <button className='start' onClick={startQuiz}>\n                Try Again?\n              </button>\n            ) : (\n              <button className='start' onClick={startQuiz}>\n                Start\n              </button>\n            )}\n          </>\n        ) : (\n          <>\n            {loading && <p>Loading Questions...</p>}\n\n            {!loading && !quizOver && (\n              <QuestionCard\n                questionNr={number + 1}\n                totalQuestions={TOTAL_QUESTIONS}\n                question={questions[number].question}\n                answers={questions[number].answers}\n                userAnswer={userAnswers ? userAnswers[number] : undefined}\n                callback={checkAnswer}\n              />\n            )}\n\n            {!quizOver &&\n            !loading &&\n            userAnswers.length === number + 1 &&\n            number !== TOTAL_QUESTIONS - 1 ? (\n              <button className='next' onClick={nextQuestion}>\n                Next Question\n              </button>\n            ) : number === TOTAL_QUESTIONS - 1 ? (\n              <button className='next' onClick={nextQuestion}>\n                End Quiz\n              </button>\n            ) : null}\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}